import unittest
import json
import os
from services.file_manager import read_json_file, write_json_file
from copy import deepcopy

# Test setups generated by ChatGPT v.4


class TestJsonFunctions(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.test_data = {
            "string": "Hello, World!",
            "integer": 42,
            "float": 3.14,
            "boolean": True,
            "null": None,
            "list": [1, "two", 3.0, True],
            "nested_dict": {
                "nested_string": "Nested Hello",
                "nested_list": [False, None, 5.67],
                "nested_nested_dict": {
                    "deep_string": "Deep Hello"
                }
            }
        }

    def setUp(self):
        self.test_path = "."
        self.test_file = "test_data.json"
        self.test_full_path = os.path.join(self.test_path, self.test_file)

    def tearDown(self):
        if os.path.exists(self.test_full_path):
            os.remove(self.test_full_path)

    def test_read_json_file(self):
        test_data = deepcopy(self.test_data)
        with open(self.test_full_path, "w") as file:
            json.dump(test_data, file)
        self.assertTrue(os.path.exists(self.test_full_path),
                        "File creation failed")

        read_data = read_json_file(self.test_path, self.test_file)
        self.assertEqual(self.test_data, read_data)

    def test_write_json_file(self):
        test_data = deepcopy(self.test_data)
        write_json_file(test_data, self.test_path, self.test_file)
        self.assertTrue(os.path.exists(self.test_full_path),
                        "File creation failed")

        with open(self.test_full_path, "r") as file:
            read_data = json.load(file)
        self.assertEqual(self.test_data, read_data)

    def test_default_file_creation(self):
        read_data = read_json_file(self.test_path, self.test_file)
        self.assertTrue(os.path.exists(self.test_full_path))
        self.assertEqual({}, read_data)


if __name__ == '__main__':
    unittest.main()
