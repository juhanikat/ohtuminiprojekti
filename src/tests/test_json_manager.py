import json
import os
import unittest
from copy import deepcopy
from unittest.mock import patch

from entities.reference import Reference
from services.file_manager import *
from services.reference_manager import ReferenceManager

# Test setups generated by ChatGPT v.4


class TestJsonFunctions(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.test_data = {
            "book-DeepLearning-2023": {
                "entry_type": "book",
                "title": "Deep Learning",
                "year": "2023",
                "author": "Ian Goodfellow, Yoshua Bengio, Aaron Courville",
                "publisher": "MIT Press"
            },
            "book-AlgorithmsUnlocked-2018": {
                "entry_type": "book",
                "title": "Algorithms Unlocked",
                "year": "2018",
                "author": "Thomas H. Cormen",
                "publisher": "MIT Press"
            },
            "book-QuantumComputation-2021": {
                "entry_type": "book",
                "title": "Quantum Computation and Quantum Information",
                "year": "2021",
                "author": "Michael A. Nielsen, Isaac L. Chuang",
                "publisher": "Cambridge University Press"
            },
            "book-ArtificialIntelligence-2022": {
                "entry_type": "book",
                "title": "Artificial Intelligence: A Modern Approach",
                "year": "2022",
                "author": "Stuart Russell, Peter Norvig",
                "publisher": "Pearson"
            },
            "book-ThePragmaticProgrammer-2019": {
                "entry_type": "book",
                "title": "The Pragmatic Programmer",
                "year": "2019",
                "author": "Andrew Hunt, David Thomas",
                "publisher": "Addison-Wesley Professional"
            }
        }

    def setUp(self):
        self.test_path = "./tests/"
        self.test_file = "test_data.json"
        self.test_full_path = os.path.join(self.test_path, self.test_file)
        self.expected_full_path = get_full_path(self.test_path, self.test_file)

    def tearDown(self):
        if os.path.exists(self.expected_full_path):
            os.remove(self.expected_full_path)

    def test_read_json_file(self):
        test_data = deepcopy(self.test_data)
        with open(self.expected_full_path, "w") as file:
            json.dump(test_data, file)
        self.assertTrue(os.path.exists(self.expected_full_path),
                        "File creation failed")

        read_data = read_json_file(self.test_path, self.test_file)
        self.assertEqual(self.test_data, read_data)

    def test_write_json_file(self):
        test_data = deepcopy(self.test_data)
        write_json_file(test_data, file_path=self.test_path,
                        file_name=self.test_file)
        self.assertTrue(os.path.exists(self.expected_full_path),
                        "File creation failed")

        with open(self.expected_full_path, "r") as file:
            read_data = json.load(file)
        self.assertEqual(self.test_data, read_data)

    def test_default_file_creation(self):
        read_data = read_json_file(self.test_path, self.test_file)
        full_path = get_full_path(self.test_path, self.test_file)
        self.assertTrue(os.path.exists(full_path))
        self.assertEqual({}, read_data)

    def test_convert_reference_manager_to_dict(self):
        ref_manager = ReferenceManager()
        for name, fields in self.test_data.items():
            ref_manager.add(Reference(name, fields))
        converted = convert_reference_manager_to_dict(ref_manager)
        self.assertEqual(converted, self.test_data)

    def test_convert_dict_to_reference_manager(self):
        ref_manager = ReferenceManager()
        converted = convert_dict_to_reference_manager(self.test_data)
        self.assertEqual(type(converted), ReferenceManager,
                         "Convert dict to reference manager failed")
        references = ref_manager.references
        for reference in references:
            self.assertIn(reference.name, self.test_data,
                          f"reference {reference.name} not found in reference manager")

    def test_load_data(self):
        with open(self.expected_full_path, "w") as file:
            json.dump(self.test_data, file)
        with patch('services.file_manager.read_json_file') as mock_read, \
                patch('services.file_manager.convert_dict_to_reference_manager') as mock_convert:
            mock_read.return_value = self.test_data
            load_data(self.expected_full_path)
            mock_read.assert_called()
            mock_convert.assert_called()

    def test_save_data(self):
        with patch('services.file_manager.convert_reference_manager_to_dict') as mock_convert, \
                patch('services.file_manager.write_json_file') as mock_write:
            mock_convert.return_value = self.test_data
            ref_manager = ReferenceManager()
            ref_manager.file_path = self.test_path
            save_data(ref_manager)
            mock_convert.assert_called()
            mock_write.assert_called()


if __name__ == '__main__':
    unittest.main()
